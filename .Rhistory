# Determine which tissue occurs most often
most_common_tissue <- names(sort(table(max_expression_tissue), decreasing = TRUE)[1])
print(paste("Most common tissue with maximum expression:", most_common_tissue))
# Extract expression values for Lymphocytes and Testis
lymphocytes_expr <- GTEx.CID.inflammatory.response.genes$Lymphocytes
testis_expr <- GTEx.CID.inflammatory.response.genes$Testis
# Perform a two-sample t-test
t_test_result <- t.test(lymphocytes_expr, testis_expr, var.equal = TRUE)
# View the t-test result
print(t_test_result)
# Extract expression values for Lymphocytes and Testis
lymphocytes_expr <- GTEx.CID.inflammatory.response.genes$Lymphocytes
testis_expr <- GTEx.CID.inflammatory.response.genes$Testis
# Perform a two-sample t-test
t_test_result <- t.test(lymphocytes_expr, testis_expr, var.equal = TRUE)
print(t_test_result)
# Perform a paired t-test
t_test_result <- t.test(lymphocytes_expr, testis_expr, paired = TRUE)
# View the result
print(t_test_result)
# Assuming `GTEx.CID.inflammatory.response.genes` contains the data
gene_ids_lymphocytes <- GTEx.CID.inflammatory.response.genes$gene.ID[!is.na(GTEx.CID.inflammatory.response.genes$Lymphocytes)]
gene_ids_testis <- GTEx.CID.inflammatory.response.genes$gene.ID[!is.na(GTEx.CID.inflammatory.response.genes$Testis)]
# Check if the gene IDs are the same
all(gene_ids_lymphocytes == gene_ids_testis)
gene_ids_lymphocytes <- GTEx.CID.inflammatory.response.genes$gene.ID[!is.na(GTEx.CID.inflammatory.response.genes$Lymphocytes)]
gene_ids_testis <- GTEx.CID.inflammatory.response.genes$gene.ID[!is.na(GTEx.CID.inflammatory.response.genes$Testis)]
# Check if the gene IDs are the same
all(gene_ids_lymphocytes == gene_ids_testis)
# output: TRUE
# If the output is TRUE, then the gene IDs match perfectly, and a paired t-test is appropriate for this case.
# Perform a paired t-test
t_test_result <- t.test(lymphocytes_expr, testis_expr, paired = TRUE)
print(t_test_result)
# Is there a significant difference?
# Yes, there is a significant difference between the expression levels of the inflammatory response genes with high-scoring CID variants in lymphocytes and testis. The paired t-test yielded a p-value of 0.01313 which is less than 0.05 treshold. This shows that the mean expression levels in these two tissues are statistically different.
review <- "I really enjoyed this product, and I thought it was great for the price."
str_detect(review, "great")
review <- "I really enjoyed this product, and I thought it was great for the price."
str_detect(review, "great")
library(tidyverse)
review <- "I really enjoyed this product, and I thought it was great for the price."
str_detect(review, "great")
library(tidyverse)
review <- "I really enjoyed this product, and I thought it was great for the price."
str_detect(review, "great")
# output: TRUE
library(tidyverse)
review <- "I really enjoyed this product, and I thought it was great for the price."
str_detect(review, "great")
# output: TRUE
str_detect(review, "pro")
TRUE
str_detect(review, "pro")
# output: TRUE
library(tidyverse)
recent_grads <- read_csv("recent_grads.csv", col_types = cols())
print("Hello")
print("Hello World")
print("Biological Statistics")
cat("hello", "world")
help(seq)
seq(1,3,0.2)
seq(1,4,length.out=3)
seq(1,4,length.out=3)
seq(1,20,length.out=2)
seq(1,4,length.out=3)
seq(1,20,length.out=15)
seq(1,4,length.out=3)
seq(1,20,length.out=15)
seq(1,50,length.out=25)
seq(to=5, from=10)
seq(from=10, to=5)
seq(to=5, from=10)
seq(from=10, to=5)
seq(to=25, from=5)
seq(from=55, to=5)
x = 5
x
#this is my comment
x = 5
x
print(x) #equivalent to above
cat(x)   #similar to print, but less autoconversion of variables - simple variable types, like numbers, are converted to strings for printing, but more complex variable types, that we'll learn later, are not.  For this reason, you may more frequently use print.
#Mixing variables within strings:
number = 5
string = "hello"
paste("Number", number, "String", string)
#Here is another way to do the same thing
sprintf("Number %s String %s", number, string)
#How do you print a quote?
string = "gene \"ABC\""
#Note:
print(string) #outputs `"gene \"ABC\""
cat(string)  #outputs gene "ABC"
#Here is a way to use print to get a similar result to cat in this case
print(string, quote=FALSE)
#You can use the \t string to denote a tab
cat("Separated\tby\ttabs")
number1 = 5
number2 = 7
sum = number1 + number2
product = number1 * number2
ratio = number1 / number2
print(number1 + number2)
number1 = 150
number2 = 25
sum = number1 + number2
product = number1 * number2
ratio = number1 / number2
print(number1 + number2)
#This program does some math on two numbers
#ask a user for one number
n1string = readline("What is the first number?\n")
#readline returns a string, so need to convert it to a number
n1 = as.numeric(n1string)
#ask a user for another number
n2string = readline("What is the second number?\n")
vector = c(1,2,3,4)
vector
x = c(1.2,2,54,6)
x
y = c(10,23.4,2,3)
y
# We can multiply two vectors element by element
print(x*y)
# Can also do a dot product of two vectors
x %*% y
#Note: In the console, you don't need to use print()
textvec=c("Patient1","Patient2","Patient3")
textvec
#Not compatible with arithmetic
#print(textvec * 2)  #gives an error
logicvec=c(TRUE,FALSE,TRUE,FALSE)
logicvec
#Can also write:
c(T,F,T,F)
textvec[1]
textvec[3]
#We can also simultaneously access multiple elements
textvec[1:2]
textvec[c(1,1,3,3)]
#The length command
length(textvec)
DNA = "AGTCGACTACGTACGACTGAGATACTGAGCGATCG"
splitVariable = strsplit(DNA, NULL)
splitVariable[[1]]
splitRev = rev(splitVariable[[1]])
paste(splitRev, collapse="")
#test that the result is the same as the original command
paste(rev(strsplit(DNA, NULL)[[1]]), collapse="")
listVariable
numericVector = c(1, 3, 5)
numericVector
#Note: numericVector is just a variable name - we call it numericVector because we define it here to contain numbers, but it could be called any variable name that is allowed.
stringVector = c("abc", "def", "ghi")
stringVector
logicVector = c(T, F, T, F)
logicVector
listVariable = list(numericVector, stringVector, logicVector, 77)
listVariable
listVariable
listVariable[1]  #access first list element
listVariable[[1]] #access content of first element
listVariable[[1]][2]
listVariable[[2]][1] = "ACGT"
listVariable[[2]]
listVariable[c(2, 4)]
listVariable
listVariable[1]  #access first list element
listVariable[[1]] #access content of first element
listVariable[[1]][2]
listVariable
listVariable[1]  #access first list element
listVariable
listVariable[1]  #access first list element
listVariable[[1]] #access content of first element
listVariable[[1]][2]
listVariable[[2]][1] = "ACGT"
listVariable[[2]][1] = "ACGT"
listVariable[[2]]
listVariable[c(2, 4)]
listVariable = list(numbers=numericVector, strings=stringVector, logic=logicVector, myNum=77)
listVariable
listVariable["numbers"]
listVariable["myNum"]
listVariable[[1]]
listVariable[["numbers"]]
listVariable$numbers  #easiest access method
vector1 = c(1,3,5)
vector1
vector2 = c(20,21,22,23,24,25)
vector2
#Create two 3x3 matrices
arrayVariable = array(c(vector1,vector2), dim = c(3,3,2))
arrayVariable
arrayVariable
#get matrix 1
arrayVariable[,,1]
#get 3rd row of matrix 2
arrayVariable[3,,2]
#get element in row 1, column 3 in matrix 1
arrayVariable[1,3,1]
#get matrix 2
arrayVariable[,,2]
name = c("patient1", "patient2", "patient3")
name
age = c(46, 49, 50)
age
smoker = c(T, F, T)
smoker
patientRecords = data.frame(name, age, smoker)
patientRecords
patientRecords
#Just like matrices
patientRecords[1,] #row 1
patientRecords[,1] #column 1
patientRecords[1,2] #element at row 1, column 2
patientRecords$age
#remember to set the current working directory (ensure Preview->Knit Directory->Current Working Directory)
getwd()
#Read the "gene_condition_source_id.txt" file
dataFrame = read.table("gene_condition_source_id.txt", header=TRUE, sep="\t", fill=TRUE, comment.char = "", quote = "")
#In earlier versions of R, by default data.frame() would create factors for string variable columns
patientRecords = data.frame(name, age, smoker, stringsAsFactors = T)
patientRecords
str(patientRecords)   #Note: "Factor w/ 3 levels"
#Tell data.frame() not to create factors
patientRecords2 = data.frame(name, age, smoker, stringsAsFactors=F)
str(patientRecords2)
protein = "MEEPQSDPSVEPPLSQETFSDLWKLLPENNVLSPLPSQAMDDLMLSPDDIEQWFTEDPGPDEAPRMPEAAPPVAPAPAAPTPAAPAPAPSWPLSSSVPSQKTYQGSYGFRLGFLHSGTAKSVTCTYSPALNKMFCQLAKTCPVQLWVDSTPPPGTRVRAMAIYKQSQHMTEVVRRCPHHERCSDSDGLAPPQHLIRVEGNLRVEYLDDRNTFRHSVVVPYEPPEVGSDCTTIHYNYMCNSSCMGGMNRRPILTIITLEDSSGNLLGRNSFEVRVCACPGRDRRTEEENLRKKGEPHHELPPGSTKRALPNNTSSSPQPKKKPLDGEYFTLQIRGRERFEMFRELNEALELKDAQAGKEPGGSRAHSSHLKSKKGQSTSRHKKLMFKTEGPDSD"
aminoacids = strsplit(protein, split = "")
aminoacids[[1]]
f = factor(aminoacids[[1]])
f
summary(f)
x = 5
if (x > 0) {
print("Positive number")
}
x = -5
if (x > 0) {
print("Positive number")
}
length(gregexpr("g", a)[[1]])
review2 <- "I really enjy codnig in R and wnt to lrn more."
str_replace(review2, pattern = "enjy", replacement = "enjoy")
library(tidyverse)
recent_grads <- read_csv("recent_grads.csv", col_types = cols())
str_replace(review2, pattern = "enjy", replacement = "enjoy")
[1] "I really enjoy codnig in R and wnt to lrn more."
str_replace(review2, pattern = "enjy", replacement = "enjoy")
# output: [1] "I really enjoy codnig in R and wnt to lrn more."
str_replace(review2, pattern = "enjy", replacement = "enjoy")
str_replace
# output: [1] "I really enjoy codnig in R and wnt to lrn more."
str_replace(review2, pattern = "enjy", replacement = "enjoy")
review2
# output: [1] "I really enjoy codnig in R and wnt to lrn more."
review2 <- "I really enjy codnig in R and wnt to lrn more."
str_replace(review2, pattern = "enjy", replacement = "enjoy")
review2
# output: [1] "I really enjoy codnig in R and wnt to lrn more."
library(tidyverse)
str_replace(review2, pattern = "enjy", replacement = "enjoy")
review2
# output: [1] "I really enjoy codnig in R and wnt to lrn more."
library(tidyverse)
str_replace(review2, pattern = "enjy", replacement = "enjoy")
review2
# output: [1] "I really enjoy codnig in R and wnt to lrn more."
library(tidyverse)
review2 <- "I really enjy codnig in R and wnt to lrn more."
str_replace(review2, pattern = "enjy", replacement = "enjoy")
review2
# output: [1] "I really enjoy codnig in R and wnt to lrn more."
library(tidyverse)
review2 <- "I really enjy codnig in R and wnt to lrn more."
str_replace(review2, pattern = "enjy", replacement = "enjoy")
review2
# output: [1] "I really enjoy codnig in R and wnt to lrn more."
library(tidyverse)
review2 <- "I really enjy codnig in R and wnt to lrn more."
str_replace(review2, pattern = "enjy", replacement = "enjoy")
review2
library(tidyverse)
review2 <- "I really enjy codnig in R and wnt to lrn more."
str_replace(review2, pattern = "enjy", replacement = "enjoy")
review2
library(tidyverse)
review2 <- "I really enjy codnig in R and wnt to lrn more."
str_replace(review2, pattern = "enjy", replacement = "enjoy")
library(tidyverse)
review2 <- "I really enjy codnig in R and wnt to lrn more."
str_replace(review2, pattern = "enjy", replacement = "enjoy")
library(tidyverse)
review2 <- "I really enjy codnig in R and wnt to lrn more."
str_replace(review2, pattern = "enjy", replacement = "enjoy")
# output: [1] "I really enjoy codnig in R and wnt to lrn more."
str_replace(review2, pattern = " and wnt to lrn more"), replacement = "")
str_replace(review2, pattern = " and wnt to lrn more", replacement = "")
review3 <- "I want to lrn R, and I definitely wnt to lrn more."
str_replace(review3, pattern = "lrn", replacement = "learn")
review3 <- "I want to lrn R, and I definitely wnt to lrn more."
str_replace_all(review3, pattern = "lrn", replacement = "learn")
library(tidyverse)
input_scores <- c("83%", "29%", "76%")
format_score <- function(score) {
fmt_string <- str_replace(score, "%", "")
num <- as.numeric(fmt_string)
return(num)
}
output_scores <- map(input_scores, format_score)
third_element <- output_scores[[3]]
library(tidyverse)
input_scores <- c("83%", "29%", "76%")
format_score <- function(score) {
fmt_string <- str_replace(score, "%", "")
num <- as.numeric(fmt_string)
return(num)
}
output_scores <- map(input_scores, format_score)
third_element <- output_scores[[3]]
third_element
format_score <- function(score) {
fmt_string <- str_replace(score, "%", "")
num <- as.numeric(fmt_string)
return(num)
}
student_scores <- student_scores %>%
mutate(
new_writing_score = map(writing_score, format_score)
)
setwd("~/Documents/R Learning/R Programming for Data Science")
format_score <- function(score) {
fmt_string <- str_replace(score, "%", "")
num <- as.numeric(fmt_string)
return(num)
}
student_scores <- student_scores %>%
mutate(
new_writing_score = map(writing_score, format_score)
)
library(tidyverse)
input_scores <- c("83%", "29%", "76%")
format_score <- function(score) {
fmt_string <- str_replace(score, "%", "")
num <- as.numeric(fmt_string)
return(num)
}
output_scores <- map(input_scores, format_score)
third_element <- output_scores[[3]]
third_element
# output: 76
format_score <- function(score) {
fmt_string <- str_replace(score, "%", "")
num <- as.numeric(fmt_string)
return(num)
}
student_scores <- student_scores %>%
mutate(
new_writing_score = map(writing_score, format_score)
)
library(tidyverse)
# Input vector
inputs <- 1:5
# Function to vectorize
add_one <- function(value) {
return(value + 1)
}
outputs <- map(inputs, add_one)
outputs
# [[1]]
# [1] 2
# [[2]]
# [1] 3
# [[3]]
# [1] 4
# [[4]]
# [1] 5
# [[5]]
# [1] 6
library(tidyverse)
percent_string <- "74%"
format_score <- function(score) {
fmt_string <- str_replace(score, "%", "")
num <- as.numeric(fmt_string)
return(num)
}
converted_string <- format_score(percent_string)
head(student_scores, 3)
library(tidyverse)
student_scores <- read_csv("scores.csv")
head(student_scores, 3)
#   names   assignment_number writing_score math_score science_score math_extra_credit
# 1 Michael 1                 56%           50%        79%           High
# 2 Michael 2                 84%           59%        72%           None
# 3 Michael 3                 64%           84%        78%           Low
library(tidyverse)
percent_string <- "74%"
format_score <- function(score) {
fmt_string <- str_replace(score, "%", "")
num <- as.numeric(fmt_string)
return(num)
}
converted_string <- format_score(percent_string)
library(tidyverse)
# Input vector
inputs <- 1:5
# Function to vectorize
add_one <- function(value) {
return(value + 1)
}
outputs <- map(inputs, add_one)
outputs
# [[1]]
# [1] 2
# [[2]]
# [1] 3
# [[3]]
# [1] 4
# [[4]]
# [1] 5
# [[5]]
# [1] 6
typeof(outputs)
# output: [1] "list"
library(tidyverse)
input_scores <- c("83%", "29%", "76%")
format_score <- function(score) {
fmt_string <- str_replace(score, "%", "")
num <- as.numeric(fmt_string)
return(num)
}
output_scores <- map(input_scores, format_score)
third_element <- output_scores[[3]]
third_element
# output: 76
format_score <- function(score) {
fmt_string <- str_replace(score, "%", "")
num <- as.numeric(fmt_string)
return(num)
}
student_scores <- student_scores %>%
mutate(
new_writing_score = map(writing_score, format_score)
)
colnames(student_scores)
# [1] "names" "assignment_number" "writing_score" "math_score"
# [5] "science_score" "math_extra_credit" "new_writing_score"
# Output shortened for readability
student_scores$new_writing_score[1:3]
# [[1]]
# [1] 56
# [[2]]
# [1] 84
# [[3]]
# [1] 64
student_scores <- student_scores %>%
mutate(
new_writing_score = unlist(map(writing_score, format_score))
)
student_scores$new_writing_score
# [1] 56 84 64 69 84 70 61 71 78 71 67 45 39 68 76 69 55 78 57 67
library(tidyverse)
student_scores <- read_csv("scores.csv", col_types = cols())
format_score <- function(score) {
fmt_string <- str_replace(score, "%", "")
num <- as.numeric(fmt_string)
return(num)
}
student_scores <- student_scores %>%
mutate(
new_writing_score = unlist(map(writing_score, format_score))
)
student_scores <- student_scores %>%
mutate(
new_math_score = unlist(map(math_score, format_score)),
new_science_score = unlist(map(science_score, format_score))
)
library(tidyverse)
student_scores <- read_csv("scores.csv", col_types = cols())
format_score <- function(score) {
fmt_string <- str_replace(score, "%", "")
num <- as.numeric(fmt_string)
return(num)
}
student_scores <- student_scores %>%
mutate(
new_writing_score = unlist(map(writing_score, format_score))
)
student_scores <- student_scores %>%
mutate(
new_math_score = unlist(map(math_score, format_score)),
new_science_score = unlist(map(science_score, format_score))
)
library(tidyverse)
student_scores <- read_csv("scores.csv", col_types = cols())
format_score <- function(score) {
fmt_string <- str_replace(score, "%", "")
num <- as.numeric(fmt_string)
return(num)
}
student_scores <- student_scores %>%
mutate(
new_writing_score = unlist(map(writing_score, format_score))
)
student_scores <- student_scores %>%
mutate(
new_math_score = unlist(map(math_score, format_score)),
new_science_score = unlist(map(science_score, format_score))
)
